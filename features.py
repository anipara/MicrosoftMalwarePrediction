#!/usr/bin/env python3

import sys
import zipfile
import csv
import codecs
from copy import deepcopy
from json import dump
import numpy as np
import re

STRLABELS = [
    'ProductName',
    'EngineVersion',
    'AppVersion',
    'AvSigVersion',
    'Platform',
    'Processor',
    'OsVer',
    'OsPlatformSubRelease',
    'OsBuildLab',
    'SkuEdition',
    'PuaMode',
    'SmartScreen',
    'Census_MDC2FormFactor',
    'Census_DeviceFamily',
    'Census_ProcessorClass',
    'Census_PrimaryDiskTypeName',
    'Census_ChassisTypeName',
    'Census_PowerPlatformRoleName',
    'Census_OSVersion',
    'Census_OSArchitecture',
    'Census_OSBranch',
    'Census_OSEdition',
    'Census_OSSkuName',
    'Census_OSInstallTypeName',
    'Census_OSWUAutoUpdateOptionsName',
    'Census_GenuineStateName',
    'Census_ActivationChannel',
    'Census_FlightRing'
]
PROCESSOR = [
    'x86',
    'x64',
    'arm64'
]
PUAMODE = [
    '',
    'on',
    'audit'
]
SMARTSCREEN = [
    "",
    "RequireAdmin",
    "ExistsNotSet",
    "Off",
    "Warn",
    "Prompt",
    "Block",
    "off",
    "On",
    "on",
    "&#x01;",
    "&#x02;",
    "OFF",
    "Promt",
    "0",
    "requireadmin",
    "Enabled",
    "prompt",
    "warn",
    "00000000",
    "requireAdmin",
    "&#x03;"
]
CPROCESSORCLASS = [
    "",
    "mid",
    "low",
    "high"
]
CCHASISTYPE = [
    "Desktop",
    "Notebook",
    "MiniTower",
    "Portable",
    "Detachable",
    "Laptop",
    "AllinOne",
    "LowProfileDesktop",
    "SpaceSaving",
    "Other",
    "Unknown",
    "HandHeld",
    "UNKNOWN",
    "Convertible",
    "Tower",
    "MainServerChassis",
    "LunchBox",
    "SubNotebook",
    "MiniPC",
    "RackMountChassis",
    "Tablet",
    "30",
    "StickPC",
    "BusExpansionChassis",
    "",
    "36",
    "82",
    "35",
    "0",
    "Blade",
    "IoTGateway",
    "MultisystemChassis",
    "SealedCasePC",
    "32",
    "31",
    "ExpansionChassis",
    "SubChassis",
    "PizzaBox",
    "88",
    "25",
    "28",
    "44",
    "127",
    "76",
    "DockingStation",
    "45",
    "49",
    "CompactPCI",
    "112",
    "BladeEnclosure",
    "81",
    "EmbeddedPC",
    "39"
]
COSSKUNAME = [
    "PROFESSIONAL",
    "CORE",
    "CORE_SINGLELANGUAGE",
    "ENTERPRISE_S",
    "CORE_COUNTRYSPECIFIC",
    "ENTERPRISE_S_N",
    "ENTERPRISE",
    "EDUCATION",
    "CLOUD",
    "PROFESSIONAL_N",
    "STANDARD_SERVER",
    "CORE_N",
    "STANDARD_EVALUATION_SERVER",
    "EDUCATION_N",
    "DATACENTER_EVALUATION_SERVER",
    "SB_SOLUTION_SERVER",
    "ENTERPRISE_N",
    "PRO_WORKSTATION_N",
    "PRO_WORKSTATION",
    "UNLICENSED",
    "ULTIMATE",
    "CLOUDN",
    "PRO_CHINA",
    "SERVERRDSH",
    "DATACENTER_SERVER",
    "ENTERPRISEG",
    "STARTER",
    "PRO_FOR_EDUCATION",
    "PRO_SINGLE_LANGUAGE",
    "UNDEFINED"
]
COSINSTALLTYPE = [
    "UUPUpgrade",
    "IBSClean",
    "Update",
    "Upgrade",
    "Other",
    "Clean",
    "Reset",
    "Refresh",
    "CleanPCRefresh"
]
COSWUAUOPTNAME = [
    "UNKNOWN",
    "FullAuto",
    "Notify",
    "AutoInstallAndRebootAtMaintenanceTime",
    "Off",
    "DownloadNotify"
]
CGENUINESTATE = [
    "IS_GENUINE",
    "OFFLINE",
    "INVALID_LICENSE",
    "UNKNOWN",
    "TAMPERED"
]
CACTIVATIONCHL = [
    "Retail",
    "OEM:NONSLP",
    "OEM:DM",
    "Volume:GVLK",
    "Volume:MAK",
    "Retail:TB:Eval"
]
CFLIGHTRING = [
    "Retail",
    "NOT_SET",
    "Unknown",
    "Disabled",
    "RP",
    "WIS",
    "WIF",
    "OSG",
    "Canary",
    "Invalid"
]

def features(zf, cf) -> dict:
    with zipfile.ZipFile(zf, mode='r', allowZip64=True) as zdatafile:
        with zdatafile.open(cf, mode='r') as rawfile:
            rawdata = csv.reader(codecs.iterdecode(rawfile, 'utf-8'))
            labels = []
            identified = {}
            for lbl in STRLABELS:
                identified[lbl] = []
            for row in rawdata:
                if labels == []:
                    labels = deepcopy(row)
                else:
                    for i in range(len(row)):
                        if labels[i] in STRLABELS:
                            if row[i] not in identified[labels[i]]:
                                identified[labels[i]].append(row[i])
            return identified

def extractInt(value: str) -> int:
    if not re.match(r'^\d+$', value):
        return -1
    return int(value)

def versionToFloat(version:str) -> float:
    if not re.match(r'^(\d+[.])+\d+$', version):
        return -1.0
    vcomponents = version.split('.')
    out = 0.0
    out += int(vcomponents[0])
    d = 0
    for i in vcomponents[1:]:
      out += int(i) * 10**(-(d+len(i)))
      d += len(i)
    return round(out, 12)

def indexIn(feature: list, value: str) -> int:
    if value not in feature:
        return -1
    return feature.index(value)

def preprocess(zfile, cfile, outfile):
    with zipfile.ZipFile(zfile, mode='r', allowZip64=True) as zdata:
        with zdata.open(cfile, mode='r') as rawfile:
            cdata = csv.reader(codecs.iterdecode(rawfile, 'utf-8'))
            header = next(cdata)
            outdata = None
            y = None
            for row in cdata:
                rdata = np.array(
                    [ # Value                               # Feature
                        versionToFloat(row[2]),             # EngineVersion
                        versionToFloat(row[3]),             # AppVersion
                        versionToFloat(row[4]),             # AvSigVersion
                        extractInt(row[5]),                 # IsBeta
                        extractInt(row[6]),                 # RtpStateBitfield
                        extractInt(row[7]),                 # IsSxsPassiveMode
                        extractInt(row[8]),                 # DefaultBrowsersIdentifier
                        extractInt(row[9]),                 # AVProductStatesIdentifier
                        extractInt(row[10]),                # AVProductsInstalled
                        extractInt(row[11]),                # AVProductsEnabled
                        extractInt(row[12]),                # HasTpm
                        extractInt(row[13]),                # CountryIdentifier
                        extractInt(row[14]),                # CityIdentifier
                        extractInt(row[15]),                # OrganizationIdentifier
                        extractInt(row[16]),                # GeoNameIdentifier
                        extractInt(row[17]),                # LocaleEnglishNameIdentifier
                        indexIn(PROCESSOR, row[19]),        # Processor :: Redundant: Census_OSArchitecture
                        extractInt(row[21]),                # OsBuild :: Redundant: OsPlatformSubRelease, OSBuildLab, Census_OSBranch, Census_OSBuildNumber
                        extractInt(row[22]),                # OsSuite
                        extractInt(row[26]),                # IsProtected
                        extractInt(row[27]),                # AutoSampleOptIn
                        indexIn(PUAMODE, row[28]),          # PuaMode
                        extractInt(row[29]),                # SMode
                        extractInt(row[30]),                # IeVerIdentifier
                        indexIn(SMARTSCREEN, row[31]),      # SmartScreen
                        extractInt(row[32]),                # Firewall
                        extractInt(row[33]),                # UacLuaenable
                        extractInt(row[36]),                # Census_OEMNameIdentifier
                        extractInt(row[37]),                # Census_OEMModelIdentifier
                        extractInt(row[39]),                # Census_ProcessorManufacturerIdentifier
                        extractInt(row[40]),                # Census_ProcessorModelIdentifier
                        indexIn(CPROCESSORCLASS, row[41]),  # Census_ProcessorClass
                        indexIn(CCHASISTYPE, row[47]),      # Census_ChassisTypeName :: Reduntant: Census_DeviceFamily, Census_MDC2FormFactor, Census_PowerPlatformRoleName
                        versionToFloat(row[54]),            # Census_OSVersion :: Redundant: OsVer, Platform
                        extractInt(row[58]),                # Census_OSBuildRevision
                        indexIn(COSSKUNAME, row[60]),       # Census_OSSkuName :: Redundant: SkuEdition, Census_OSEdition
                        indexIn(COSINSTALLTYPE, row[61]),   # Census_OSInstallTypeName
                        extractInt(row[62]),                # Census_OSInstallLanguageIdentifier
                        extractInt(row[63]),                # Census_OSUILocaleIdentifier
                        indexIn(COSWUAUOPTNAME, row[64]),   # Census_OSWUAutoUpdateOptionsName
                        extractInt(row[65]),                # Census_IsPortableOperatingSystem
                        indexIn(CGENUINESTATE, row[66]),    # Census_GenuineStateName
                        indexIn(CACTIVATIONCHL, row[67]),   # Census_ActivationChannel
                        extractInt(row[68]),                # Census_IsFlightingInternal
                        extractInt(row[69]),                # Census_IsFlightsDisabled
                        indexIn(CFLIGHTRING, row[70]),      # Census_FlightRing
                        extractInt(row[71]),                # Census_ThresholdOptIn
                        extractInt(row[72]),                # Census_FirmwareManufacturerIdentifier
                        extractInt(row[73]),                # Census_FirmwareVersionIdentifier
                        extractInt(row[74]),                # Census_IsSecureBootEnabled
                        extractInt(row[75]),                # Census_IsWIMBootEnabled
                        extractInt(row[76]),                # Census_IsVirtualDevice
                        extractInt(row[77]),                # Census_IsTouchEnabled
                        extractInt(row[78]),                # Census_IsPenCapable
                        extractInt(row[79]),                # Census_IsAlwaysOnAlwaysConnectedCapable
                        extractInt(row[80]),                # Wdft_IsGamer
                        extractInt(row[81])                 # Wdft_RegionIdentifier
                    ]
                )
                # Irrelevant/Redundant features:
                # MachineIdentifier,
                # Platform,
                # OsVer,
                # OsPlatformSubRelease,
                # OSBuildLab,
                # SkuEdition
                # Census_DeviceFamily,
                # Census_ProcessorCoreCount,
                # Census_PrimaryDiskTotalCapacity,
                # Census_PrimaryDiskTypeName,
                # Census_SystemVolumeTotalCapacity,
                # Census_HasOpticalDiskDrive,
                # Census_TotalPhysicalRAM,
                # Census_MDC2FormFactor,
                # Census_InternalPrimaryDiagonalDisplaySizeInInches,
                # Census_InternalPrimaryDisplayResolutionHorizontal,
                # Census_InternalPrimaryDisplayResolutionVertical
                # Census_PowerPlatformRoleName
                # Census_InternalBatteryType
                # Census_InternalBatteryNumberOfCharges
                # Census_OSArchitecture
                # Census_OSBranch
                # Census_OSBuildNumber
                # Census_OSEdition
                if outdata is not None:
                    outdata = np.vstack((outdata, rdata))
                else:
                    outdata = deepcopy(rdata)
                if header[-1] == 'HasDetections':
                    if y is None:
                        y = np.array([[extractInt(row[82])]])
                    else:
                        y = np.vstack((y, np.array([[extractInt(row[82])]])))
            print(outdata, y)
            if header[-1] == 'HasDetections':
                np.savez_compressed(outfile, x=outdata, y=y)
            else:
                np.save(outfile, outdata, allow_pickle=False)

if __name__ == '__main__':
    try:
        zfile = sys.argv[1]
        tfile = sys.argv[2]
        ofile = sys.argv[3]
    except IndexError:
        sys.stderr.write('training ZIP file needed with the inner file name:\r\nfeatures.py ZIPFILE CSVFILE\r\n')
    # identified = features(zfile, tfile)
    # with open('string_features.json', 'w') as output:
    #     dump(identified, output, indent=4)
    preprocess(zfile, tfile, ofile)
