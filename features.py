#!/usr/bin/env python3

import sys
import zipfile
import csv
import codecs
from copy import deepcopy
from json import dump
import numpy as np
import re

STRLABELS = [
    'ProductName',
    'EngineVersion',
    'AppVersion',
    'AvSigVersion',
    'Platform',
    'Processor',
    'OsVer',
    'OsPlatformSubRelease',
    'OsBuildLab',
    'SkuEdition',
    'PuaMode',
    'Census_MDC2FormFactor',
    'Census_DeviceFamily',
    'Census_PrimaryDiskTypeName',
    'Census_ChassisTypeName',
    'Census_PowerPlatformRoleName',
    'Census_OSVersion',
    'Census_OSArchitecture',
    'Census_OSBranch',
    'Census_OSEdition',
    'Census_OSSkuName',
    'Census_OSInstallTypeName',
    'Census_OSWUAutoUpdateOptionsName',
    'Census_GenuineStateName',
    'Census_ActivationChannel',
    'Census_FlightRing'
]
PROCESSOR = ['x86', 'x64', 'arm64']
SKUEDITION = ['Invalid', 'Home', 'Pro', 'Education', 'Cloud', 'Server', 'Enterprise', 'Enterprise LTSB']
PUAMODE = ['', 'on', 'audit']

def features(zf, cf) -> dict:
    with zipfile.ZipFile(zf, mode='r', allowZip64=True) as zdatafile:
        with zdatafile.open(cf, mode='r') as rawfile:
            rawdata = csv.reader(codecs.iterdecode(rawfile, 'utf-8'))
            labels = []
            identified = {}
            for lbl in STRLABELS:
                identified[lbl] = []
            for row in rawdata:
                if labels == []:
                    labels = deepcopy(row)
                else:
                    for i in range(len(row)):
                        if labels[i] in STRLABELS:
                            if row[i] not in identified[labels[i]]:
                                identified[labels[i]].append(row[i])
            return identified

def versionToFloat(version:str) -> float:
    if version == '' or not re.match(r'^(\d+[.])+\d+$', version):
        return 0.0
    vcomponents = version.split('.')
    out = 0.0
    out += int(vcomponents[0])
    d = 0
    for i in vcomponents[1:]:
      out += int(i) * 10**(-(d+len(i)))
      d += len(i)
    return round(out, 12)

def preprocess(zfile, cfile, outfile):
    with zipfile.ZipFile(zfile, mode='r', allowZip64=True) as zdata:
        with zdata.open(cfile, mode='r') as rawfile:
            cdata = csv.reader(codecs.iterdecode(rawfile, 'utf-8'))
            next(cdata)
            outdata = None
            for row in cdata:
                rdata = np.array(
                    [
                        versionToFloat(row[2]),     # EngineVersion
                        versionToFloat(row[3]),     # AppVersion
                        versionToFloat(row[4]),     # AvSigVersion
                        float('0'+row[5]),          # IsBeta
                        int('0'+row[6]),            # RtpStateBitfield
                        int('0'+row[7]),            # IsSxsPassiveMode
                        int('0'+row[8]),            # DefaultBrowsersIdentifier
                        int('0'+row[9]),            # AVProductStatesIdentifier
                        int('0'+row[10]),           # AVProductsInstalled
                        int('0'+row[11]),           # AVProductsEnabled
                        int('0'+row[12]),           # HasTpm
                        int('0'+row[13]),           # CountryIdentifier
                        int('0'+row[14]),           # CityIdentifier
                        int('0'+row[15]),           # OrganizationIdentifier
                        int('0'+row[16]),           # GeoNameIdentifier
                        int('0'+row[17]),           # LocaleEnglishNameIdentifier
                        PROCESSOR.index(row[19]),   # Processor
                        versionToFloat(row[20]),    # OsVer
                        int('0'+row[21]),           # OsBuild
                        int('0'+row[22]),           # OsSuite
                        SKUEDITION.index(row[25]),  # SkuEdition
                        int('0'+row[26]),           # IsProtected
                        PUAMODE.index(row[28]),     # PuaMode
                    ]
                )
                if outdata is not None:
                    outdata = np.vstack((outdata, rdata))
                else:
                    outdata = deepcopy(rdata)
            print(outdata)
            np.save(outfile, outdata, allow_pickle=False)

if __name__ == '__main__':
    try:
        zfile = sys.argv[1]
        tfile = sys.argv[2]
        ofile = sys.argv[3]
    except IndexError:
        sys.stderr.write('training ZIP file needed with the inner file name:\r\nfeatures.py ZIPFILE CSVFILE\r\n')
    # identified = features(zfile, tfile)
    # with open('string_features.json', 'w') as output:
    #     dump(identified, output, indent=4)
    preprocess(zfile, tfile, ofile)
