#!/usr/bin/env python3

import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Dropout

model = Sequential(
    layers=[
        Dense(512, input_dim=57, activation='relu', use_bias=True),
        Dropout(0.5),
        Dense(256, activation='relu', use_bias=True),
        Dropout(0.5),
        Dense(128, activation='relu', use_bias=True),
        Dropout(0.5),
        Dense(64, activation='relu', use_bias=True),
        Dense(32, activation='relu', use_bias=True),
        Dense(16, activation='relu', use_bias=True),
        Dense(8, activation='relu', use_bias=True),
        Dense(1, activation='sigmoid', use_bias=False)
    ]
)

model.summary()
model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)

# datafile = np.load('small-train.npz')
datafile = np.load('sample-200k.npz')
# x = datafile['x'][0:40000,:]
# y = datafile['y'][0:40000,:]
x = datafile['x']
y = datafile['y']

# ex = datafile['x'][40000:49999,:]
# ey = datafile['y'][40000:49999,:]

evalfile = np.load('small-train.npz')
ex = evalfile['x']
ey = evalfile['y']

model.fit(x, y, epochs=50, batch_size=500, shuffle=True)
print('*** END OF TRAINING ***\r\n\r\nEVALUATING ...\r\n')
score = model.evaluate(ex, ey, verbose=1)
print('Results:')
print(model.metrics_names)
print(score)

# rx = np.load('sample_test.npy')

# predictions = model.predict(rx)

# rounded = [int(round(x[0])) for x in predictions[:100]]

# print(rounded)

# print(score * 100)
